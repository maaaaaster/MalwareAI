from sklearn import feature_extraction
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.model_selection import train_test_split 
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score 
import lightgbm as lgb 
from sklearn.metrics import log_loss
import pandas as pd
import os
from config import *
import json

threadlistfile = '/home/malware/malwaretc/thread_list.csv'
filelistfile = '/home/malware/malwaretc/file_features.csv'
testfile = '/home/malware/tc/test/file_features.csv'
# filelistfile = '/home/malware/tc/malwaretc/file_features.csv'


def loadTFFeatures():
    outname = 'all_tfidf.csv'
    if os.path.exists(outname):
        data = pd.read_csv(outname)
    else:
        df = pd.read_csv(filelistfile)
        corpus1,y = fileData(df)   #  threadData(df)#[seq.replace(';',' ') for seq in df['seq']]
        df2 = pd.read_csv(testfile)
        corpus2,_ = fileData(df2)   #  threadData(df)#[seq.replace(';',' ') for seq in df['seq']]
        corpus = corpus1+corpus2
        vectorizer=CountVectorizer()
        vectorizer = TfidfVectorizer(lowercase=False)    
        transformer=TfidfTransformer()
        tfidf=transformer.fit_transform(vectorizer.fit_transform(corpus))
        word=vectorizer.get_feature_names()#获取词袋模型中的所有词语
        weight=tfidf.toarray()#将tf-idf矩阵抽取出来，元素a[i][j]表示j词在i类文本中的tf-idf权重
        data = pd.DataFrame(weight)
        data.to_csv(outname,header=word,index=0)
    # print(list(data.columns))
    return data


def fileData(df):
    result = []
    if 'label' in df:    
        y = df['label']        
    else:
        y = []
    for index,x in df.iterrows():
        apilist = x['apilist']#[1:-1].replace(',',' ')
        result.append(apilist)
    return result,y




def loadTF_IDF():
    df = pd.read_csv(filelistfile)
    corpus,y = fileData(df)   #  threadData(df)#[seq.replace(';',' ') for seq in df['seq']]
    vectorizer=CountVectorizer()
    vectorizer = TfidfVectorizer(lowercase=False)    
    transformer=TfidfTransformer()
    tfidf=transformer.fit_transform(vectorizer.fit_transform(corpus))
    word=vectorizer.get_feature_names()#获取词袋模型中的所有词语
    weight=tfidf.toarray()#将tf-idf矩阵抽取出来，元素a[i][j]表示j词在i类文本中的tf-idf权重
    x = weight
    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1)
    train_data=lgb.Dataset(x_train,label=y_train)

    param = {'num_leaves':150, 'objective':'multiclass','max_depth':7,'learning_rate':.05,'max_bin':200,'num_class':6}
    param['metric'] = ['auc']

    num_round=20

    lgbm=lgb.train(param,train_data,num_round)
    checkModel(y_test,lgbm.predict(x_test))



if __name__ == "__main__":
    loadTFFeatures()
    # loadTF_IDF()
    

