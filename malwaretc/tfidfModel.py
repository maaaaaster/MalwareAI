from sklearn import feature_extraction
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.model_selection import train_test_split 
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score 
import lightgbm as lgb 
from sklearn.metrics import log_loss
import pandas as pd
import os
from config import *


def loadTFFeatures():
    if os.path.exists(tfidfFeatureName):
        data = pd.read_csv(tfidfFeatureName)
    else:
        df = pd.read_csv(outseqFile)
        corpus,y = fileData(df,label=False)   #  threadData(df)#[seq.replace(';',' ') for seq in df['seq']]
        vectorizer=CountVectorizer()
        vectorizer = TfidfVectorizer(lowercase=False)    
        transformer=TfidfTransformer()
        tfidf=transformer.fit_transform(vectorizer.fit_transform(corpus))
        word=vectorizer.get_feature_names()#获取词袋模型中的所有词语
        weight=tfidf.toarray()#将tf-idf矩阵抽取出来，元素a[i][j]表示j词在i类文本中的tf-idf权重
        data = pd.DataFrame(weight)
        data.to_csv(tfidfFeatureName,index=0)
    return data
    

def fileData(df,label=True):
    result = []
    y = []
    for x in df.groupby('file_id'):
        fileid = x[0]        
        data = x[1]   
        if label:
            y.append(data['label'].max())
        apis = []
        for seq in data['seq']:
            apis.extend(seq.split(';'))
        result.append(' '.join(apis))
    return result,y


def threadData(df):
    return [seq.replace(';',' ') for seq in df['seq']],df['label']

def loadTF_IDF():
    df = pd.read_csv(outseqFile)
    corpus,y = fileData(df)   #  threadData(df)#[seq.replace(';',' ') for seq in df['seq']]
    vectorizer=CountVectorizer()
    vectorizer = TfidfVectorizer(lowercase=False)    
    transformer=TfidfTransformer()
    tfidf=transformer.fit_transform(vectorizer.fit_transform(corpus))
    word=vectorizer.get_feature_names()#获取词袋模型中的所有词语
    weight=tfidf.toarray()#将tf-idf矩阵抽取出来，元素a[i][j]表示j词在i类文本中的tf-idf权重
    x = weight
    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.1)
    train_data=lgb.Dataset(x_train,label=y_train)

    param = {'num_leaves':150, 'objective':'multiclass','max_depth':7,'learning_rate':.05,'max_bin':200,'num_class':6}
    param['metric'] = ['auc']

    num_round=20

    lgbm=lgb.train(param,train_data,num_round)
    checkModel(y_test,lgbm.predict(x_test))



if __name__ == "__main__":
    # loadTF_IDF()
    loadFeatures()
