import os
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score,log_loss
import lightgbm as lgb 
from config import *
from tfidfModel import *

staticFeatureFile = '/home/malware/malwaretc/file_features.csv'
def fileFeatures(inputfile):
    df = pd.read_csv(inputfile)
    print(df.columns)
    x = df[['max_thread_len','min_thread_len','mean_thread_len','thread_num']]
    fileIDs = df['file_id']

    return x,fileIDs

def fileLabels(inputfile):
    df = pd.read_csv(inputfile)
    return df['label']


def trainModel():
    x,fileIds = fileFeatures(staticFeatureFile)
    row,col = x.shape
    tfFeatures = loadTFFeatures()
    x= pd.concat([x,tfFeatures.iloc[0:row,:]],axis=1)
    y = fileLabels(staticFeatureFile)
    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.3)
    train_data=lgb.Dataset(x_train,y_train)


    param = {'objective':'multiclass','learning_rate':.05,'num_class':6,'max_bin':300}
    param.update({'max_depth':10,'num_leaves':550 })
    param['metric'] = ['multi_logloss']

    num_round=1000
    # test_data = lgb.Dataset(x_test,y_test)
    test_data = lgb.Dataset(x_test,y_test, reference=train_data)

    
    # lgbm=lgb.train(param,train_data,num_round)
    lgbm=lgb.train(param,train_data,num_round,valid_sets=[test_data], early_stopping_rounds=10)
    checkModel(y_test,lgbm.predict(x_test))
    lgbm.save_model('model.txt', num_iteration=lgbm.best_iteration)




if __name__=='__main__':
    trainModel()
