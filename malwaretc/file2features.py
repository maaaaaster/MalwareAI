import os
import pandas as pd
from multiprocessing import Pool
from config import *

env = 'train'
# env = 'test'
if env == 'test':
    basedir =  '/home/malware/tc/test/'
else:
    basedir =  '/home/malware/tc/train/'


import json


filelist = []
for filename in os.listdir(basedir):
    filelist.append(os.path.join(basedir,filename))
def readApiList(filename):
    df = pd.read_csv(filename)
    file_id = df['file_id'][0]
    if env == 'train':
        label = df['label'][0]
    tlist = []
    for x in df.groupby('tid'):
        data = x[1]
        return_list = []
        api_list = []
        for index, data in data.iterrows():
            return_list.append((data['return_value']))
            api_list.append(str(api2index[data['api']]))
        appendData = {
            'file_id': file_id,
            'tid':x[0],
            'return_list': return_list,
            'apilist': api_list
        }
        if env=='train':
            appendData['label'] = label
        tlist.append(appendData)
    return tlist
def readFileFeatures(filename):
    df = pd.read_csv(filename)
    result ={}

    file_id = df['file_id'][0]
    if env=='train':
        label = file_id = df['label'][0]
        result['label'] = label
    api_list = []
    result['file_id'] = file_id
    row,col = df.shape
    thread_num = 0
    max_thread_len = -1
    min_thread_len = 10000
    for x in df.groupby('tid'):
        tlen = len(x[1])
        for index,data in x[1].iterrows():
            api = str(api2index[data['api']])
            api_list.append(api)
        thread_num+=1
        max_thread_len = max(max_thread_len,tlen)
        min_thread_len = min(min_thread_len,tlen)
    result['mean_thread_len'] = row//thread_num
    result['min_thread_len'] = min_thread_len
    result['max_thread_len'] = max_thread_len
    result['thread_num'] = thread_num
    result['apilist'] = ' '.join(api_list)

    return result

def saveFileFeatures():
    pool = Pool(20)
    result = pool.map(readFileFeatures,filelist)
    pool.close()
    pool.join()
    df = pd.DataFrame(result)
    df.to_csv('file_features.csv',index=0)

def saveThreadFeatures():
    print('thread features')
    pool = Pool(20)
    result = pool.map(readApiList,filelist)
    output = []
    pool.close()
    pool.join()
    for k in result:
        output.extend(k)
    df = pd.DataFrame(output)
    df.to_csv('thread_list.csv',index=0)

def appendFileFeatures(filename):
    with open('file_features.csv','a+') as outf:
        data = readFileFeatures(filename)
        print(data)
        # outs = '{apilist},{file_id},{label},{max_thread_len},{mean_thread_len},{min_thread_len},{thread_num}'\
        #     .format(apilist=data['apilist'],file_id=str(data['file_id']),label=str(data['label']),
        #             max_thread_len=str(data['max_thread_len']),mean_thread_len=str(data['mean_thread_len']),
        #             min_thread_len = str(data['min_thread_len']),thread_num = str(data['thread_num']))
        outs = '{apilist},{file_id},{max_thread_len},{mean_thread_len},{min_thread_len},{thread_num}'\
            .format(apilist=data['apilist'],file_id=str(data['file_id']),
                    max_thread_len=str(data['max_thread_len']),mean_thread_len=str(data['mean_thread_len']),
                    min_thread_len = str(data['min_thread_len']),thread_num = str(data['thread_num']))
        outf.write(outs)



# append('/home/malware/tc/test/file_53092.txt')
# saveThreadFeatures()
saveThreadFeatures()