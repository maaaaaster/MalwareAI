import pandas as pd
import numpy as np
from domain import psl
import networkx as nx

df = pd.read_csv('cluster_domain.csv')
topset = list(df.top)
topLen = len(topset)
topMap = {}
for i in range(topLen):
    topMap[topset[i]] = [0]*topLen
    topMap[topset[i]][i] = 1

def meanFeatures(data):
    return np.mean([len(x) for x in data])

t = df.groupby('host',as_index=False).agg({'domain':meanFeatures})
t.columns=['host','mean_len']
df = pd.merge(df,t,on='host')

def staticFeature(data):
    domain = data['domain']
    host = data['host']
    top = data['top']
    vals = domain.lower().split('.')
    block = len(vals)
    charNum =0
    numberNum = 0
    allLen = 0
    for char in domain:
        if char == '.':
            continue
        allLen+=1
        if char>='0' and char<='9':
            numberNum+=1
        elif char>='a' and char<='z':
            charNum+=1
    subDomainNum = data['subCount']
    mean_len = data['mean_len']
    hasNumber = 1 if numberNum>0 else 0
    blockLens = [len(x) for x in vals]
    blockDis = (max(blockLens)- min(blockLens))/mean_len
    std = np.std(blockLens)
    return [block,charNum/(allLen+0.0),numberNum/(allLen+0.0),subDomainNum,mean_len/10,hasNumber,blockDis,std] + topMap[top]
    

def clusterFirst():
    first = df[df.subCount==1]
    train = []
    def addToTrain(data):  
        train.append(staticFeature(data))
    first.apply(addToTrain,axis=1)
    X = list(first.domain)
    cluster(X,train)

   


def cluster(X,train):
    from sklearn.cluster import DBSCAN
    y_pred = DBSCAN(eps = 0.5).fit_predict(train)
    result = {}
    for i in range(len(X)):
        key = y_pred[i]
        if key not in result:
            result[key] = set()
        result[key].add(X[i])
    for key in result:
        print(result[key])
    print(len(result.keys()))


clusterFirst()
