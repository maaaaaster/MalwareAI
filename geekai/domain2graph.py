import networkx as nx
import pandas as pd

def addEdges(edges,df,key1,key2,filterSet = None):
    def addEdge(data):
        if filterSet is None or data[key1] in filterSet or data[key2] in filterSet:
            edges.append((data[key1],data[key2]))
    df.apply(addEdge,axis=1)


G  = nx.read_adjlist('levenshtein_first.txt')
df = pd.read_csv('first_url.csv')
shaSet = set(df.sha1)
hostSet = set(G.nodes())
edges = []
addEdges(edges,df,'sha1','clean_url',hostSet)
G.add_edges_from(edges)

index = 0
totalSha =0
outf = open('graph.txt','a+')
for largest_components in sorted(nx.connected_components(G), key=len, reverse=False):
    g = G.subgraph(largest_components)
    nodeSet = set(g.nodes) & shaSet
    hostSet = set(g.nodes) - shaSet
    totalSha += len(nodeSet)
    if len(nodeSet) > 0:
        index += 1
        for node in nodeSet:
        #     print("%s,first_domain_%d\n" % (node, index))
            outf.write("%s,first_domain_%d\n" % (node, index))

print(len(nodeSet))
print(totalSha)

