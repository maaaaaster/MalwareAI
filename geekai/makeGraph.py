import networkx as nx
import pandas as pd
import os
from domain import psl,checkip

phase1 = 'D:/ai/geek/phase1/trace2_test'



def addEdges(df,key,edges):
    def addEdge(data):
        edges.append((data['sha1'],data[key]))
    df.apply(addEdge,axis=1)

def psldomain(domain):
    if checkip(domain):
        return domain
    else:
        return psl.get_public_suffix(domain)

def domain2edges(df,edges):
    df['psl'] = df['domain'].map(psldomain)
    def addEdge(data):
        edges.append((data['psl'],data['sha1']))
    df.apply(addEdge,axis=1)


def loadGraph(basedir):    
    webfile = os.path.join(basedir,'trojan_web.csv')
    ipfile = os.path.join(basedir,'fqdn_ip.csv')
    reginfofile = os.path.join(basedir,'fqdn_reginfo.csv')
    phone = os.path.join(basedir,'trojan_phone.csv')
    email = os.path.join(basedir,'trojan_email.csv')
    
    shaSet = set()
    edges = []
    dataSet = {}

    for filename in [webfile,ipfile,reginfofile,phone,email]:        
        df = pd.read_csv(filename)
        shaSet = shaSet | set(df['sha1'])
        dataSet[filename] = df
    addEdges(dataSet[email],'contain_email',edges)
    addEdges(dataSet[phone],'phone_number',edges)


    dataSet[ipfile]['domain']  = dataSet[ipfile]['site']
    # dataSet[reginfofile]['domain']
    dataSet[webfile]['domain'] = dataSet[webfile]['url'].map(lambda x:x.split('://')[-1].split('/')[0].split(':')[0])
    for filename in [webfile,ipfile,reginfofile]:  
        domain2edges(dataSet[filename],edges)

            
    G=nx.read_adjlist("dga.txt")
    # G.add_nodes_from(shaSet)
    G.add_edges_from(edges)
    groupIndex = 0
    outf = open('trace2.csv','w+')
    for largest_components in sorted(nx.connected_components(G), key=len, reverse=True)[::-1]:
        g = G.subgraph(largest_components) 
        relatedNodes = []       
        for node in g.nodes:
            if node in shaSet:
                outf.write('%s,%d\n'%(node,groupIndex))
            else:
                relatedNodes.append(node) 
        print(relatedNodes)       
        groupIndex+=1

if __name__=='__main__':
    loadGraph(phase1)