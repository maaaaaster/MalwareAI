import networkx as nx
import pandas as pd
import os
from domain import psl,checkip,noHeadDomain
from appendEdges import loadEdges
phase1 = 'D:/ai/geek/phase1/trace2_test'
phase1 = 'D:/tempdata/phase1/phase1/trace2_test'

import matplotlib.pyplot as plt



def addEdges(df,key,edges):
    def addEdge(data):
        edges.append((data['sha1'],data[key]))
    df.apply(addEdge,axis=1)

def psldomain(domain):
    if checkip(domain):
        return domain
    else:
        return psl.get_public_suffix(domain)

def domain2edges(df,edges,pslSet):
    df['psl'] = df['domain'].map(psldomain)

    # t = df[df['psl'].map(lambda x: x in pslSet or checkip(x))]
    # whiteSet = set(df[df['url'].map(lambda x: '/push/apk' in x or '/repository/' in x)].psl)
    # t = t[t['psl'].map(lambda x: x not in whiteSet)]
    #
    t = df[df['psl'].map(lambda x: x in pslSet)]

    def addEdge(data):
        edges.append((data['psl'],data['sha1']))
    t.apply(addEdge,axis=1)


def loadGraph(basedir):    
    webfile = os.path.join(basedir,'trojan_web.csv')
    ipfile = os.path.join(basedir,'fqdn_ip.csv')
    reginfofile = os.path.join(basedir,'fqdn_reginfo.csv')
    phone = os.path.join(basedir,'trojan_phone.csv')
    email = os.path.join(basedir,'trojan_email.csv')
    
    shaSet = set()
    edges = []
    dataSet = {}
    G=nx.read_adjlist("dga.txt")
    pslSet = set(G.nodes)

    for filename in [webfile,ipfile,reginfofile,phone,email]:        
        df = pd.read_csv(filename)
        shaSet = shaSet | set(df['sha1'])
        dataSet[filename] = df
    addEdges(dataSet[email],'contain_email',edges)
    addEdges(dataSet[phone],'phone_number',edges)
    normalSet = set(dataSet[email]['contain_email']) & set(dataSet[phone]['phone_number'])

    dataSet[ipfile]['domain']  = dataSet[ipfile]['site']
    # dataSet[reginfofile]['domain']
    dataSet[webfile]['domain'] = dataSet[webfile]['url'].map(lambda x:x.split('://')[-1].split('/')[0].split(':')[0])
    for filename in [webfile]:  #,ipfile,reginfofile
        domain2edges(dataSet[filename],edges,pslSet)

    


    G.add_nodes_from(shaSet)
    newedges,edgeSet = loadEdges()
    # edges+=newedges
    G.add_edges_from(edges)
    groupIndex = 0
    outf = open('trace2.csv','w+')
    noCluster = 0
    for largest_components in sorted(nx.connected_components(G), key=len, reverse=False):
        g = G.subgraph(largest_components) 
        relatedNodes = []       
        for node in g.nodes:
            if node in shaSet:
                outf.write('%s,%d\n'%(node,groupIndex))
            elif node not in normalSet and g.degree(node)>1:
                relatedNodes.append(node)
        groupLen = len(g.nodes)
        if groupLen<3:
            noCluster += groupLen
        groupIndex+=1
        # drawG(g,pslSet,edgeSet)
    print(groupLen)
    # drawG(g,pslSet,edgeSet)
    # showNode(g,'tftpc.com','fnyxe.cc',pslSet,edgeSet)
    print('noCluster:%d'%noCluster)

        


    # for de in g.degree():
    #     print(de)

    # 182.92.26.10

def drawG(newg,pslSet,edgeSet):
    labels = {}
    for node in newg.nodes():
        if node in pslSet or checkip(node):
            labels[node]=node
        else:
            labels[node]=''
    nx.draw_networkx(newg,with_labels =True,labels=labels)
    for n,degree in newg.degree():
        if n in pslSet or checkip(n) or n in edgeSet:
            print(n,degree)
    plt.show()
    print('_________________')

def showNode(g,node,checkNode,pslSet,edgeSet):
    cnt = 7
    newg = nx.Graph()         
    for k, v in nx.bfs_successors(g, node):
        for node2 in v:
            newg.add_edge(k, node2)
        cnt-=1
        if checkNode in node2 or checkNode in k:
            break   

    drawG(newg,pslSet,edgeSet)
if __name__=='__main__':
    loadGraph(phase1)