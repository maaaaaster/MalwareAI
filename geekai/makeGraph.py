import networkx as nx
import pandas as pd
import os
from domain import psl,checkip,noHeadDomain
import matplotlib.pyplot as plt

phase1 = 'D:/ai/geek/phase1/trace2_test'
phase1 = 'D:/tempdata/phase1/phase1/trace2_test'
phase1 = '/home/OpenCode/malware/trace2_test'
phase2 = '/home/OpenCode/malware/phase2/trace2_test'

basedir = phase2
webfile = os.path.join(basedir, 'trojan_web.csv')
ipfile = os.path.join(basedir, 'fqdn_ip.csv')
reginfofile = os.path.join(basedir, 'fqdn_reginfo.csv')
phone = os.path.join(basedir, 'trojan_phone.csv')
email = os.path.join(basedir, 'trojan_email.csv')

def filterIP(df):
    df['cleanURL'] = df['url'].map(lambda x:x.strip('http://'))
    web = df[df['cleanURL'].map(lambda x: ':' in x and '/push/apk' not in x and '/repository/' not in x)]
    edges = []
    def onlyIP(data):
        isIP = data.domain.map(lambda x:checkip(x))
        if data[isIP].shape[0] == data.shape[0]:
            addEdges(data,'sha1','domain',edges)
    web.groupby('sha1').apply(onlyIP)
    return edges



def psl2sha(df):
    result = {}
    def addSet(data):
        for domain in data['pls'],data['clean_domain']:
            if domain not in result:
                result[domain] = set()
            result[domain].add(data['sha1'])
    df['clean_domain'] = df['domain'].map(noHeadDomain)
    df['psl'] = df['domain'].map(psldomain)
    t = df.apply(addSet,axis=1)
    return result


def loadDataset():
    dataSet = {}
    for filename in [webfile,ipfile,reginfofile,phone,email]:
        df = pd.read_csv(filename)
        dataSet[filename] = df
    dataSet[ipfile]['domain']  = dataSet[ipfile]['site']
    dataSet[webfile]['domain'] = dataSet[webfile]['url'].map(lambda x:x.split('://')[-1].split('/')[0].split(':')[0])
    return dataSet

def sha2DomainEdges(dataSet,pslSet):
    edges = []
    for filename in [webfile,ipfile,reginfofile]:  #,ipfile,reginfofile
        domain2edges(dataSet[filename],edges,pslSet)
    return edges

def saveGraph():
    edges = []
    dataSet = loadDataset()
    G=nx.read_adjlist("dga.txt")
    pslSet = set(G.nodes)
    addEdges(dataSet[email],'sha1','email',edges)
    addEdges(dataSet[phone],'sha1','phone_number',edges)
    shaSet = set(dataSet[webfile]['sha1']) | set(dataSet[phone]['sha1']) | set(dataSet[email]['sha1'])
    outf = open('graph.txt','w+')
    # edges.extend(filterIP(dataSet[webfile]))
    for edge in edges:
        if edge[1] in shaSet:
            outf.write('%s,%s\n'%(edge[1],edge[0]))
        else:
            outf.write('%s,%s\n' % (edge[0], edge[1]))

    G.add_edges_from(sha2DomainEdges(dataSet,pslSet))
    index = 0
    for largest_components in sorted(nx.connected_components(G), key=len, reverse=False):
        g = G.subgraph(largest_components)
        nodeSet = set(g.nodes) & shaSet
        if len(nodeSet)>0:
            index+=1
            for node in nodeSet:
                outf.write("%s,domain_%d\n"%(node,index))


def addEdges(df,key1,key,edges):
    def addEdge(data):
        edges.append((data[key1],data[key]))
    df.apply(addEdge,axis=1)

def psldomain(domain):
    if checkip(domain):
        return domain
    else:
        return psl.get_public_suffix(domain)

def addURLIP(df,edges):
    if 'psl' not in df.columns:
        df['psl'] = df['domain'].map(psldomain)
    t = df[df['psl'].map(checkip)]
    whiteSet = set(df[df['url'].map(lambda x: '/push/apk' in x or '/repository/' in x)].psl)
    t = t[t['psl'].map(lambda x: x not in whiteSet)]
    def addEdge(data):
        edges.append((data['psl'], data['sha1']))
    t.apply(addEdge, axis=1)


def domain2edges(df,edges,pslSet):
    df['clean_domain'] = df['domain'].map(noHeadDomain)
    df['psl'] = df['domain'].map(psldomain)
    t = df[df['psl'].map(lambda x: x in pslSet)]
    def addEdge(data):
        edges.append((data['psl'],data['sha1']))
    t.apply(addEdge,axis=1)


def loadGraph():
    edges = []
    dataSet = {}
    G=nx.read_adjlist("dga.txt")
    G.add_nodes_from('blackDomain.txt')
    pslSet = set(G.nodes)
    dataSet = loadDataset()

    shaSet = set(dataSet[webfile]['sha1']) | set(dataSet[phone]['sha1']) | set(dataSet[email]['sha1'])
    print(len(shaSet))

    sha2domain = pd.read_csv('sha2domain.csv')


    addURLIP(dataSet[webfile],edges)
    addEdges(dataSet[email],'sha1','contain_email',edges)
    addEdges(dataSet[phone],'sha1','phone_number',edges)
    # addEdges(sha2domain,'sha1', 'clean_domain', edges)
    # addEdges(dataSet[ipfile],'clean_domain','ip',edges)

    G.add_nodes_from(shaSet)

    # appendG = nx.read_adjlist('black.txt')
    # G.add_edges_from(appendG.edges)

    normalSet = set(dataSet[email]['contain_email']) & set(dataSet[phone]['phone_number'])

    print(shaSet & normalSet)
    G.add_edges_from(edges)
    groupIndex = 0
    outf = open('trace2.csv','w+')
    noCluster = 0
    for largest_components in sorted(nx.connected_components(G), key=len, reverse=False):
        g = G.subgraph(largest_components) 
        nodeSet = set(g.nodes) & shaSet
        groupLen = len(nodeSet)
        if len(nodeSet)>0:
            groupIndex += 1
            if groupLen<2:
                noCluster += groupLen
            for node in nodeSet:
                outf.write('%s,%d\n'%(node,groupIndex))

        # drawG(g,pslSet,edgeSet)
    print('maxLen:%d'%groupLen)
    print('totalGroup:%d'%groupIndex)
    checkG(g,normalSet)

    # drawG(g,pslSet,edgeSet)
    # showNode(g,'tftpc.com','fnyxe.cc',pslSet,edgeSet)
    print('noCluster:%d'%noCluster)

        
def checkG(newg,normal):
    domainMap = {}
    index = 0
    for line in open('dga.txt').readlines():
        index+=1
        for data in line.strip().split(' '):
            if data in domainMap:
                print(data)
            else:
                domainMap[data]=index
    for node in newg.nodes:
        if node not in normal:
            continue
        groupSet = set()
        domainSet = set()
        cnt=3
        for k, v in nx.bfs_successors(newg, node):
            cnt-=1
            for node2 in v:
                if node2 in domainMap:
                    domainSet.add(node2)
                    groupSet.add(domainMap[node2])
            if cnt==0:
                break
        print(node,domainSet)
        input()

def drawG(newg,pslSet,edgeSet):
    labels = {}
    for node in newg.nodes():
        if node in pslSet or checkip(node):
            labels[node]=node
        else:
            labels[node]=''
    nx.draw_networkx(newg,with_labels =True,labels=labels)
    for n,degree in newg.degree():
        if n in pslSet or checkip(n) or n in edgeSet:
            print(n,degree)
    plt.show()
    print('_________________')

def showNode(g,node,checkNode,pslSet,edgeSet):
    cnt = 7
    newg = nx.Graph()         
    for k, v in nx.bfs_successors(g, node):
        for node2 in v:
            newg.add_edge(k, node2)
        cnt-=1
        if checkNode in node2 or checkNode in k:
            break   

    drawG(newg,pslSet,edgeSet)




if __name__=='__main__':
    # loadGraph()
    saveGraph()