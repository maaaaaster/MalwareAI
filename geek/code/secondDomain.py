import json

import pandas as pd

from cluster import readFile

domainShaMap = {}
domainFileMap = {}
shaDomainMap = {}
secondDomainMap = {}
DomianClassification = {}
domainIpmap = {}
secondWhiteSet = {'edu','cn','com','net'}
from code.tools import *
def checkip(ip):  
    p = re.compile('^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$')  
    if p.match(ip):  
        return True  
    else:  
        return False  

for data in readFile(fileMap['fqdn']):
    sha = data['sha1']
    url = data['site']
    ip = data['ip']
    if url not in domainIpmap:
        domainIpmap[url] = set()
    domainIpmap[url].add(ip)

for data in readFile(fileMap['web']):
    sha = data['sha1']
    url = data['url']
    vals = url.split('/')
    fulldomain = vals[2].split(':')[0]       
    if checkip(fulldomain):
        DomianClassification[fulldomain] = 'ip'
        continue
    filename = vals[-1]
    if fulldomain not in domainFileMap:
        domainFileMap[fulldomain] = set()
    domainFileMap[fulldomain].add(filename)
    if fulldomain not in domainShaMap:
        domainShaMap[fulldomain] = set()
    domainShaMap[fulldomain].add(sha)
    if sha not in shaDomainMap:
        shaDomainMap[sha] = set()
    shaDomainMap[sha].add(fulldomain)
    vals = fulldomain.split('.')
    secondDomain = '.'.join(vals[-2:])
    if secondDomain not in secondDomainMap:
        secondDomainMap[secondDomain] = set()
    secondDomainMap[secondDomain].add(fulldomain)


print("domain nums: %d"%(len(domainShaMap)))


def rootInGroupTree(groupTree,node):
    if node not in groupTree:
        groupTree[node]=node
    while groupTree[node]!=node:
        node=groupTree[node]
    return node

def clusterSet(vecrot2Group,node2vector):
    groupTree = {}
    for node,vectors in node2vector.items():
        group = None
        vectors = list(vectors)
        for vector in vectors:
            if vector not in vecrot2Group:
                continue
            nodeGroup = rootInGroupTree(groupTree,vecrot2Group[vector])
            if group is None:
                group = nodeGroup
            else:
                groupTree[rootInGroupTree(groupTree,vecrot2Group[vector])] = group
    for node  in groupTree:
        groupTree[node] = rootInGroupTree(groupTree,node)

    for vector in vecrot2Group:
        vecrot2Group[vector] = rootInGroupTree(groupTree,vecrot2Group[vector])

from publicsuffix import PublicSuffixList
import codecs
psl_file = codecs.open('suffix.dat', encoding='utf8')
psl = PublicSuffixList(psl_file)
def makeDGASet(domainIpmap,domainShaMap,shaDomainMap):
    dgaSet = set()
    secondDGA = {}
    for domain in domainShaMap:
        if domain not in domainIpmap and domain not in dgaSet:
            # vals = domain.split('.')
            # secondDomain = '.'.join(vals[-2:])
            secondDomain = psl.get_public_suffix(domain)
            if secondDomain not in secondDGA:
                secondDGA[secondDomain] = 0
            secondDGA[secondDomain]+=1  
            dgaSet.add(domain)

    return dgaSet,secondDGA

dgaSet,secondDGA = makeDGASet(domainIpmap,domainShaMap,shaDomainMap)

trainData = []
for domain in domainShaMap:
    vals = domain.split('.')
    isDGA = domain in dgaSet
    secondDomain = '.'.join(vals[-2:])
    secondDomainVal = vals[-2]
    if secondDomainVal in secondWhiteSet:
        secondDomainVal =  vals[-3]
    secondDomainNum = len(secondDomainMap[secondDomain])
    secondDGANum = secondDGA[secondDomain] if secondDomain in secondDGA else 0

    trainData.append({
        'domain':domain,
        'filecount':len(domainShaMap[domain]),
        'enddomain':vals[-1],
        'seconddomain':secondDomainVal,
        'block':len(vals),
        'domainLen':len(domain),
        'secondDomainMap':secondDomainNum,
        'domainFileLen':len(domainShaMap[domain]),
        'ipNum':0 if isDGA else len(domainIpmap[domain]),
        'isdga':isDGA,
        'secondDGANum':secondDGANum
    })

def saveDGA():
    X = pd.DataFrame(trainData)
    toCheck = X[(X['secondDGANum']>3) & (X['block']>2) ]
    domainGroup = {}
    outf = open('dga.txt','w+')
    outf_graph = open('graph.txt','a+')
    groupMap = {}
    index = 0
    whiteSet = loadWhiteMap()
    for x in toCheck.groupby('seconddomain'):
        if x[0] in whiteSet:
            # print(x[0],x[1]['domain'])
            continue
        for domain in x[1]['domain']:
            if index not in groupMap:
                groupMap[index] = []
            groupMap[index].append(domain)
            domainGroup[domain] = index
        index+=1
    for key in domainGroup:
        outf.write('%s,%d\n'%(key,domainGroup[key]))
        for sha in domainShaMap[key]:
            outf_graph.write('%s,domain%d\n'%(sha,domainGroup[key]))
    json.dump(groupMap,open('secondCluster.txt','w+'))


        
if __name__=='__main__':
    saveDGA()
