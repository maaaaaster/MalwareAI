import pandas as pd
from functools import reduce
from tools import *
import csv
import json




def filterDomainSet(domains):
    result = set()
    for domain in domains:
        if domain.startswith('www.'):
            result.add(domain[4:])
        else:
            result.add(domain)
    return result

def extractDomain(filename):
    domains = set()
    ips = set()
    inf = open(filename,encoding='utf-8')
    reader = csv.reader(inf)
    _ = next(reader)
    for data in reader:
        url = data[1]
        if '/' in url:
            vals = url.split('/')
            fulldomain = vals[2].split(':')[0]
        else:
            fulldomain = url
        if checkip(fulldomain):
            ips.add(fulldomain)
        else:
            domains.add(fulldomain)
    domains = filterDomainSet(domains)
    return domains

def loadWhiteMap():
    whiteSet = set()
    for line in open('prank.top.1m.20180322').readlines():
        domain = line.split('\t')[0]
        whiteSet.add(domain)
    whiteSet = filterDomainSet(whiteSet)
    return whiteSet

def readDomains():
    webDomain = extractDomain(fileMap['web'])
    ipDomain = extractDomain(fileMap['fqdn'])
    regionDomain = extractDomain(fileMap['region'])
    whiteDomainSet = loadWhiteMap()
    noRegisterDomain = webDomain - ipDomain - regionDomain

    whiteKeys =  set()
    for domain in whiteDomainSet:
        whiteKeys.add(domain2key(domain))

    noRegisterKeyMap = {}

    noRegisterBlack = []
    keyGroup = {}
    for domain in noRegisterDomain:
        key = domain2key(domain)
        if key in whiteKeys:
            continue
        if key not in noRegisterKeyMap:
            noRegisterKeyMap[key] = []
        noRegisterKeyMap[key].append(domain)
        noRegisterBlack.append(domain)

    twoleveldomains = []
    for key in noRegisterKeyMap:
        if len(noRegisterKeyMap[key])>1:
            keyGroup[key] = noRegisterKeyMap[key]
        else:
            twoleveldomains.append(noRegisterKeyMap[key][0])


    with open('data/keyDomainMap.txt','w+') as outf:
        json.dump(keyGroup,outf)
    with open('data/noRegisterBlack.txt','w+') as outf:
        json.dump(noRegisterBlack,outf)
    with open('data/noRegisterBlackTwoLevel.txt','w+') as outf:
        json.dump(twoleveldomains,outf)
def domainFeature(domain):
    vals = domain.split('.')
    charNum =0
    numberNum = 0
    allLen = 0
    specialChar = 0
    key = domain2key(domain)
    keyNum = 0
    firstNum = 0
    for char in key:
        if char>='0' and char<='9':
            keyNum +=1
    for char in vals[0]:
        if char>='0' and char<='9':
            firstNum +=1
    for char in domain:
        if char == '.':
            continue
        allLen+=1
        if char>='0' and  char<='9':
            numberNum+=1
        elif char>='a' and char<='z':
            charNum+=1
        else:
            specialChar+=1
    return {
    'domain':domain,
    'enddomain':vals[-1],
    'block':len(vals),
    'charLen':charNum,
    'numLen':numberNum,
    'specialChar':specialChar,
    'keyNumber':keyNum,
    'firstNum': firstNum
    }

def clusterDomains(domains,outname):
    check = []
    for domain in domains:
        features = domainFeature(domain)
        check.append(features)
    oneHotFeature(check,'enddomain')
    df = pd.DataFrame(check)
    domains = df['domain']
    del(df['domain'])
    x = df

    from sklearn.cluster import DBSCAN
    y_pred = DBSCAN().fit_predict(x)
    group2domain = {}
    outf = open(outname, 'w+')
    for i in range(len(y_pred)):
        if y_pred[i] not in group2domain:
            group2domain[y_pred[i]] = []
        group2domain[y_pred[i]].append(domains[i])
    result = {}
    for group in group2domain:
        print(group, group2domain[group])
        if group<0:
            continue
        else:
            result[str(group)] = group2domain[group]
    json.dump(result,open(outname,'w+'))

def group2file():
    sha2domain, domain2sha = readDomainSet()
    outf = open('data/graph.txt','w+')
    for filename in ['keyDomainMap','featureCluster']:
        data = json.load(open('data/%s.txt'%filename))
        for group,domains in data.items():
            for domain in domains:
                for sha in domain2sha[domain]:
                    outf.write('%s,%s_%s\n'%(sha,filename,group))

if __name__=='__main__':
    # readDomains()
    # clusterDomains(json.load(open('data/noRegisterBlack.txt')),'data/featureCluster.txt')
    # clusterDomains(json.load(open('data/noRegisterBlackTwoLevel.txt')), 'data/featureCluster.txt')
    group2file()