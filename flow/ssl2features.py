import time
import os
import json
from multiprocessing import Pool,cpu_count
import csv
import numpy as np

JsonPath  = '/home/eta/attacks/json/'

def secAndNs(time,ns):
    ns = int(str(ns)[:6])
    return time*(10**6)+ns

def isDataOk(data):
    if 'port.src' not in data['ConnectInfor']:
        return False
    if data['ConnectInfor']['port.src'] not in [80,443] or data['ConnectInfor']['port.dst'] not in [80,443]:
        return True
    return False

def ipSrcClient(data):
    srcPort = data['ConnectInfor']['port.src']
    if srcPort not in [ 443,22,23,80]:
        return True
    else:
        return False


def featureFromData(data,newData):
    packerList = {
        'src':[],
        'dst': []
    }
    timeList = {
        'src': [],
        'dst': []
    }
    pretime = {
        'src':0,
        'dst':0
    }
    if 'Packets' not in data['Statistics']:
        newData['minResponse'] = -1
        newData['maxRequest'] = -1
        newData['timeRatio'] = -1
        newData['sendList'] = ''
        newData['recList'] = ''
        return
    packets = data['Statistics']['Packets']
    for packet in packets:
        if packet['Len']>0:
            key = 'src'
        else:
            key = 'dst'
        packetLen = abs(packet['Len'])
        packerList[key].append(packetLen)
        if len(timeList[key])==0:
            pretime[key] = secAndNs(packet['Sec'],packet['nSec'])
        else:
            nowtime = secAndNs(packet['Sec'], packet['nSec'])
            gap = max(nowtime-pretime[key],0)
            timeList[key].append(gap)
            pretime[key]=nowtime
    isSrc = ipSrcClient(data)
    if isSrc:
        requestList= packerList['src']
        recList = packerList['dst']
        sendTime = timeList['src']
        recTime = timeList['dst']
    else:
        requestList = packerList['dst']
        recList = packerList['src']
        sendTime = timeList['dst']
        recTime = timeList['src']
    maxRequest = max(requestList) if len(requestList) > 0 else 0
    minResponse = min(recList) if len(recList) > 0 else 0
    newData['minResponse'] = minResponse
    newData['maxRequest'] = maxRequest
    if len(sendTime)>0 and len(recTime)>0:
        newData['timeRatio'] = np.mean(sendTime)/np.mean(recTime)
    else:
        newData['timeRatio'] = -1
    sendList = ';'.join(str(x) for x in requestList)
    recList = ';'.join(str(x) for x in recList)
    newData['sendList'] = sendList if len(sendList)>0 else 'None'
    newData['recList'] = recList if len(recList)>0 else 'None'


def timeFromData(data):
    return str2time(data['ConnectInfor']['StartTime'],data['ConnectInfor']['StartTime_ns'])



def data2Feature(data):
    newData = {}
    isSrc = ipSrcClient(data)
    clientIP = data['ConnectInfor']['ip.dst']
    serverIP = data['ConnectInfor']['ip.src']
    clientPort = data['ConnectInfor']['port.dst']
    serverPort = data['ConnectInfor']['port.src']

    sendByte = data['ConnectInfor']['Bytes.dst']
    recByte = data['ConnectInfor']['Bytes.src']
    sendNum = data['ConnectInfor']['Num.dst']
    recNum = data['ConnectInfor']['Num.src']
    sendPlayload = data['ConnectInfor']['PayloadNum.dst']
    recPlayload = data['ConnectInfor']['PayloadNum.src']
    if isSrc:
        clientIP, serverIP = serverIP, clientIP
        sendByte, recByte = recByte, sendByte
        clientPort,serverPort = serverPort,clientPort
        sendNum, recNum = recNum, sendNum
        sendPlayload, recPlayload = recPlayload, sendPlayload
    newData['clientIP'] = clientIP
    newData['serverIP'] = serverIP
    newData['clientPort'] = clientPort
    newData['serverPort'] = serverPort
    newData['sendByte'] = sendByte
    newData['recByte'] = recByte
    newData['sendNum'] = sendNum
    newData['recNum'] = recNum
    newData['sendPlayload'] = sendPlayload
    newData['recPlayload'] = recPlayload
    newData['flowNum'] = sendNum + recNum
    newData['packetRatio'] = sendNum / (recNum + 0.01)
    newData['byteRatio'] = sendByte / (recByte + 0.01)
    featureFromData(data, newData)
    return newData

def json2csv(data,filename):
    outf = open(filename, 'w+')
    if len(data)>0:
        dw = csv.DictWriter(outf, data[0].keys())
        dw.writeheader()
        for row in data:
            dw.writerow(row)
    outf.close()

def loadData(filename,startTime=0,endTime=0x0fffffffffffffff):
    result = []
    for line in open(filename).readlines():
        data = json.loads(line)
        flowTime = timeFromData(data)
        if flowTime > startTime and flowTime < endTime:
            result.append(data2Feature(data))
    json2csv(result,'test.csv')



def str2time(time_str,ns):
    ns = int(str(ns)[:6])
    return time.mktime(time.strptime(time_str,'%Y-%m-%d %H:%M:%S'))*(10**6)+ns

def extraceFromData(data,keys,default = None):
    tempData = data.copy()
    for key in keys:
        if key in tempData:
            tempData = tempData[key]
        else:
            tempData = default
    return tempData




def featuresFromData(tlsList,connectList):
    key2tls = {}
    result = []
    for filename in tlsList:
        for line in open(filename).readlines():
            data = json.loads(line)
            if not isDataOk(data):
                continue
            connectKey = extraceFromData(data,['ConnectInfor','ConnectKeyID'])
            key2tls[connectKey] = data['ConnectInfor']
    for filename in connectList:
        for line in open(filename).readlines():
            data = json.loads(line)
            connectKey = extraceFromData(data,['ConnectInfor','ConnectKeyID'])
            if connectKey not in key2tls or not isDataOk(data):
                continue
            newData = {}
            tlsdata = key2tls[connectKey]
            sendByte = data['ConnectInfor']['Bytes.dst']-tlsdata['Bytes.dst']
            recByte = data['ConnectInfor']['Bytes.src']-tlsdata['Bytes.src']
            sendNum = data['ConnectInfor']['Num.dst']-tlsdata['Num.dst']
            recNum = data['ConnectInfor']['Num.src']-tlsdata['Num.src']
            sendPlayload = data['ConnectInfor']['PayloadNum.dst']-tlsdata['PayloadNum.dst']
            recPlayload = data['ConnectInfor']['PayloadNum.src']-tlsdata['PayloadNum.src']
            isSrc = ipSrcClient(data)
            clientIP = data['ConnectInfor']['ip.dst']
            serverIP = data['ConnectInfor']['ip.src']
            clientPort = data['ConnectInfor']['port.dst']
            serverPort = data['ConnectInfor']['port.src']    
            if isSrc:
                clientIP, serverIP = serverIP, clientIP
                sendByte, recByte = recByte, sendByte
                clientPort,serverPort = serverPort,clientPort
                sendNum, recNum = recNum, sendNum
                sendPlayload, recPlayload = recPlayload, sendPlayload
            newData['clientIP'] = clientIP
            newData['serverIP'] = serverIP
            newData['clientPort'] = clientPort
            newData['serverPort'] = serverPort
            newData['sendByte'] = sendByte
            newData['recByte'] = recByte
            newData['sendNum'] = sendNum
            newData['recNum'] = recNum
            newData['sendPlayload'] = sendPlayload
            newData['recPlayload'] = recPlayload
            newData['flowNum'] = sendNum + recNum
            newData['packetRatio'] = sendNum / (recNum + 0.01)
            newData['byteRatio'] = sendByte / (recByte + 0.01)
            result.append(newData)
    return result

def makeWhiteCSV():
    dirname = '/home/eta/json/'
    result = []   
    for subdir in os.listdir(dirname):
        if '20171227' not in subdir:
            continue
        tlsfile = []
        connectfiles = []
        for root,dir,names in os.walk(os.path.join(dirname,subdir)):
            for name in names:
                if 'Connect' in root and '20171227' in root:
                    filename = os.path.join(root,name)
                    connectfiles.append(filename)
                if 'SSL' in root and '20171227' in root:
                    filename = os.path.join(root,name)
                    tlsfile.append(filename)
        result.extend(featuresFromData(tlsfile,connectfiles))
    json2csv(result,'white_raw.csv')

def makeBlackCSV(basedir):
    result = []
    for subdir in os.listdir(basedir):
        connectList = []
        tlsList = []
        for root,dir,names in os.walk(os.path.join(basedir,subdir)):
            for name in names:
                filename = os.path.join(root,name)
                if 'Connect' in root:
                    connectList.append(filename)
                elif 'SSL' in root:
                    tlsList.append(filename)
        result.extend(featuresFromData(tlsList,connectList))
    json2csv(result,'black_raw.csv')

def realTimeAttack():
    filename = '/home/eta/attacks/connect_attacks.txt'
    result = []
    for line in open(filename).readlines():
        data = json.loads(line)
        if not isDataOk(data):
            continue
        result.append(data2Feature(data))
    json2csv(result, 'http.csv')

if __name__=='__main__':
    # makeWhiteCSV()
    realTimeAttack()
    # makeBlackCSV('/home/eta/attacks/json/')
    # loadData(0'/home/eta/attacks/json/_home_eta_attacks_pcap_appscan_00001.pcap/Extract/5/Connect/2018-05-30_22-44-41_1532498587.json')
