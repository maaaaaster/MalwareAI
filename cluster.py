import os
import csv
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA

from sklearn.cluster import KMeans


def line2data(line):
    return line.strip().split(',')

def readFile(filename):        
    dataList = []
    inf = open(filename)
    reader = csv.reader(inf)
    keys = next(reader)
    keys[0] = 'sha1'
    for row in reader:
        newData = {}
        for i in range(len(keys)):
            newData[keys[i]] = row[i]           
        dataList.append(newData)

    return dataList


# def addtoGraph(graph,n1,n2):
#     if n1 not in graph:
#         graph[n1] = []
#     graph[n1].append(n2)
#     if n2 not in graph:
#         graph[n2] = []
#     graph[n2].append(n1)

def clusterFromDir(dirname):
    ipfile = os.path.join(dirname,'fqdn_ip.csv')
    email = os.path.join(dirname,'trojan_email.csv')
    region = os.path.join(dirname,'fqdn_reginfo.csv')
    phone = os.path.join(dirname,'trojan_phone.csv')
    web = os.path.join(dirname,'trojan_web.csv')
    graphs = set()
    for filename in [ipfile,email,region,phone,web]:
        for data in readFile(filename):
            if 'sha1' not in data:
                print(filename,data)
            node1 = data['sha1']
            for key in data:
                if key == 'sha1':
                    continue                
                node2 = data[key]
                if len(node2)>0:    
                    graph = '%s %s\n'%(node1,node2)                
                    graphs.add(graph)
    with open('graph.txt','w+') as outf:        
        outf.writelines(list(graphs))

                
def cluster():
    dirname = 'geek/phase1/trace2_test'
    ipfile = os.path.join(dirname,'fqdn_ip.csv')
    email = os.path.join(dirname,'trojan_email.csv')
    region = os.path.join(dirname,'fqdn_reginfo.csv')
    phone = os.path.join(dirname,'trojan_phone.csv')
    web = os.path.join(dirname,'trojan_web.csv')
    shaList = {}
    for filename in [ipfile,email,region,phone,web]:
        with open(filename) as inf:
            inf.readline()
            for line in inf.readlines():
                sha = line.split(',')[0]
                if sha not in shaList:
                    shaList[sha] = []
    with open('geek/phase1/trace2_test/vec_all.txt') as inf:        
        featureLen = int(inf.readline().split(' ')[1].strip())
        for line in inf.readlines():
            vals = line.split(' ')
            key = vals[0]
            if key in shaList:
                for val in vals[1:]:
                    shaList[key].append(float(val))
        v = DictVectorizer()
    plt.figure(figsize=(12, 12))
    shaL = list(shaList.keys())
    X = list(shaList.values())
    random_state = 170
    model = KMeans(n_clusters=10000)
    y = model.fit_predict(X)    
    print(pd.Series(model.labels_).value_counts())
    print(pd.DataFrame(model.cluster_centers_))
    
    outf = open('trace2.csv','w+')
    for i in range(len(shaL)):
        outf.write('%s,%d\n'%(shaL[i],y[i]))

    pca = PCA()
    data = pd.DataFrame(X)
    data =pca.fit_transform(data)
    data = pd.DataFrame(data,index=X.index)
#     tsne = TSNE(learning_rate=100)
#     tsne.fit_transform(X)
#     data =pd.DataFrame(tsne.embedding_, index=X.index)
 
# 不同类别用不同颜色和样式绘图
    d = data[model.labels_==0]
    plt.plot(d[0],d[1],'r.')
    d = data[model.labels_==1]
    plt.plot(d[0],d[1],'go')
    d = data[model.labels_==2]
    plt.plot(d[0],d[1],'b*')
    plt.show()

def culstterTest(dirname):
    ipfile = os.path.join(dirname,'fqdn_ip.csv')
    email = os.path.join(dirname,'trojan_email.csv')
    region = os.path.join(dirname,'fqdn_reginfo.csv')
    phone = os.path.join(dirname,'trojan_phone.csv')
    web = os.path.join(dirname,'trojan_web.csv')
    graphs = set()
    checkNum = []
    for filename in [email]:
        for data in readFile(filename):
            if 'sha1' not in data:
                print(filename,data)
            node1 = data['sha1']
            for key in data:
                if key == 'sha1':
                    continue                
                node2 = data[key]
                if node2 not in checkNum:
                    checkNum.append(node2)
                if len(node2)>0:    
                    graph = '%s %s\n'%(node1,node2)                
                    graphs.add(graph)
    print(len(checkNum))

def graph2family(filename):
    graphMap = {}
    hashMap = {}
    fatherMap = {}
    index =0
    for line in open(filename).readlines():
        vals = line.split(' ')
        familyID = index
        childID = index
        for key in vals:
            if key in graphMap:
                familyID = min(familyID,graphMap[key])
                childID = max(familyID,graphMap[key])
        graphMap[vals[0]] = familyID
        graphMap[vals[1]] = familyID
        hashMap[vals[0]] = familyID
        fatherMap[childID] = familyID
        if familyID==index:
            index+=1
    outf = open('trace2.csv','w+')
    for key in fatherMap:
        family = fatherMap[key]
        while family!=fatherMap[family]:
            family = fatherMap[family]
        fatherMap[key] = family
    print(len(set(graphMap.values())))
    for key in hashMap:
        outf.write('%s,%d\n'%(key,fatherMap[hashMap[key]]))

if __name__=='__main__':
    # graph2family('geek/phase1/trace2_test/graph.txt')
    # clusterFromDir('geek/phase1/trace2_test')
    cluster()
    # culstterTest('geek/phase1/trace2_test')
    